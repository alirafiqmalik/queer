/*
              __ __ __
             |__|__|  | __
             |  |  |  ||__|
  ___ ___ __ |  |  |  |
 |   |   |  ||  |  |  |    Ubiquitous Internet @ IIT-CNR
 |   |   |  ||  |  |  |    C++ quantum routing libraries and tools
 |_______|__||__|__|__|    https://github.com/ccicconetti/quantum-routing

Licensed under the MIT License <http://opensource.org/licenses/MIT>
Copyright (c) 2022 C. Cicconetti <https://ccicconetti.github.io/>

Permission is hereby  granted, free of charge, to any  person obtaining a copy
of this software and associated  documentation files (the "Software"), to deal
in the Software  without restriction, including without  limitation the rights
to  use, copy,  modify, merge,  publish, distribute,  sublicense, and/or  sell
copies  of  the Software,  and  to  permit persons  to  whom  the Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE  IS PROVIDED "AS  IS", WITHOUT WARRANTY  OF ANY KIND,  EXPRESS OR
IMPLIED,  INCLUDING BUT  NOT  LIMITED TO  THE  WARRANTIES OF  MERCHANTABILITY,
FITNESS FOR  A PARTICULAR PURPOSE AND  NONINFRINGEMENT. IN NO EVENT  SHALL THE
AUTHORS  OR COPYRIGHT  HOLDERS  BE  LIABLE FOR  ANY  CLAIM,  DAMAGES OR  OTHER
LIABILITY, WHETHER IN AN ACTION OF  CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE  OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#pragma once

#include "QuantumRouting/capacitynetwork.h"

namespace uiiit {
namespace qr {

enum class AppRouteAlgo {
  Random  = 0,
  BestFit = 1,
  Drr     = 2, // https://arxiv.org/abs/2203.05844v2
};

std::vector<AppRouteAlgo> allAppRouteAlgos();
std::string               toString(const AppRouteAlgo aAlgo);
AppRouteAlgo              appRouteAlgofromString(const std::string& aAlgo);

/**
 * @brief A network of quantum repeaters using Entanglement Swapping (ES) where
 * edges are characterized by their capacity only, in terms of EPR pairs that
 * can be generated by per second.
 *
 * Links are directional and, in principle, the capacity can be different
 * for the two directions.
 *
 * It is possible to route two types of resources:
 *
 * - flows: they are characterized by a source, a destination and a net EPR
 * rate; they represent metrology, sensing, and QKD applications that require a
 * constant rate of end-to-end entangled pairs
 *
 * - apps: they are characterized by a host node and a number of peers, as well
 * as a numeric priority; they represent elastic applications, e.g., for
 * distributed quantum computing
 */
class EsNetwork final : public CapacityNetwork
{
 public:
  struct FlowDescriptor {
    FlowDescriptor(const unsigned long aSrc,
                   const unsigned long aDst,
                   const double        aNetRate) noexcept;

    void movePathRateFrom(FlowDescriptor& aAnother);

    // input
    const unsigned long theSrc;     //!< the source vertex
    const unsigned long theDst;     //!< the destination vertex
    const double        theNetRate; //!< in EPR/s

    // output
    std::vector<unsigned long> thePath;      //!< hops not including src
    double                     theGrossRate; //!< in EPR/s
    std::size_t                theDijsktra;  //!< number of times called

    std::string toString() const;
  };

  struct AppDescriptor {
    using Hops = std::vector<unsigned long>;

    AppDescriptor(const unsigned long               aHost,
                  const std::vector<unsigned long>& aPeers,
                  const double                      aPriority,
                  const double aFidelityThreshold) noexcept;

    bool operator<(const AppDescriptor& aOther) const;

    // input
    const unsigned long theHost; //!< the vertex that hosts the computation
    const std::vector<unsigned long> thePeers;    //!< entanglement peers
    const double                     thePriority; //!< priority weight
    const double theFidelityThreshold;            //!< fidelity threshold

    // working variables
    std::map<unsigned long, std::list<Path>> theRemainingPaths; //!< key: length

    // output
    struct Output {
      explicit Output(const Path& aPath);

      Hops   theHops;
      double theNetRate   = 0; //!< in EPR-pairs/s
      double theGrossRate = 0; //!< in EPR-pairs/s
    };
    std::map<unsigned long, std::vector<Output>> theAllocated; //!< key: peer
    std::size_t theVisits; //!< number of visits

    double      netRate() const;
    double      grossRate() const;
    std::string toString() const;

   private:
    double accumulate(
        const std::function<double(const AppDescriptor::Output&)>& aFn) const;
  };

  using FlowCheckFunction = std::function<bool(const FlowDescriptor&)>;
  using AppCheckFunction =
      std::function<bool(const AppDescriptor&, const Path&)>;

  /**
   * @brief Create a network with given links and assign random weights
   *
   * The default measurement probability is 1.
   *
   * @param aEdges The edges of the network (src, dst).
   * @param aWeightRv The r.v. to draw the edge weights.
   * @param aMakeBidirectional If true then for each pair (A,B) two edges are
   * added A->B and B->A, with the same weight.
   */
  explicit EsNetwork(const EdgeVector&         aEdges,
                     support::RealRvInterface& aWeightRv,
                     const bool                aMakeBidirectional);

  /**
   * @brief Create a network with given links and weights
   *
   * The default measurement probability is 1.
   *
   * @param aEdgeWeights The unidirectional edges and weights of the network
   * (src, dst, w).
   */
  explicit EsNetwork(const WeightVector& aEdgeWeights);

  /**
   * @brief Set the measurement probability.
   *
   * @param aMeasurementProbability the new measurement probability
   *
   * @throw std::runtime_error if the measurement probability is not in [0,1]
   */
  void measurementProbability(const double aMeasurementProbability);

  //! \return the measurement probability.
  double measurementProbability() const noexcept {
    return theMeasurementProbability;
  }

  /**
   * @brief Find the maximum net rate achievable from a node to another.
   *
   * @param aApp The host application. Use only the information about the
   * source node; ignore the other fields.
   * @param aPeer The candidate peer (destination node).
   * @param aCheckFunction Function to check if a potential path is valid.
   * @return double The maximum net rate achievable, in EPR pairs/s, >= 0.
   *
   * The search is not full, so it is not guaranteed that the real maximum
   * value will be returned, but an approximation.
   */
  double maxNetRate(
      const AppDescriptor&    aApp,
      const unsigned long     aPeer,
      const AppCheckFunction& aCheckFunction = [](const auto&, const auto&) {
        return true;
      }) const;

  /**
   * @brief Route the given flows in this network starting with current
   * capacities.
   *
   * The flows are routed one by one in the order in which they are passed.
   * The capacities are updated whenever a flow can be admitted, in which case
   * the corresponding descriptor is also updated with routing info.
   *
   * @param aFlows the flows to be routed (admitted flows are modified)
   * @param aCheckFunction the flow is considered feasible only if this
   * function returns true, otherwise it is inadmissible; the default is to
   * always accept the flow
   *
   * @throw std::runtime_error if aFlows contain an ill-formed request, in which
   * case we guarantee that the internal state is not changed
   */
  void route(
      std::vector<FlowDescriptor>& aFlows,
      const FlowCheckFunction&     aCheckFunction = [](const auto&) {
        return true;
      });

  /**
   * @brief Route the given elastic applications in the network.
   *
   * @param aApps the applications to be routed
   * @param aAlgo the algorithm to be used for resource allocation
   * @param aQuantum  the allocation quantum to be used (only used with DRR)
   * @param aRv a U[0,1] random variable (only used with Random)
   * @param aK the maximum number of paths to be found for each app and peer
   * @param aCheckFunction the flow is considered feasible only if this
   * function returns true, otherwise it is inadmissible; the default is to
   * always accept the flow
   *
   * @throw std::runtime_error if aFlows contain an ill-formed request, in which
   * case we guarantee that the internal state is not changed
   *
   * Resource allocation strategies:
   * - DRR: applications are assigned resources in round-robin order, using a
   *   quantum that is proportional to their priority weight
   * - Random: applications are assigned resources in random order
   * - BestFit: applicatations are assigned resources in a greedy manner, i.e.,
   *   in decreasing order of their path length
   */
  void route(
      std::vector<AppDescriptor>& aApps,
      const AppRouteAlgo          aAlgo,
      const double                aQuantum,
      support::RealRvInterface&   aRv,
      const std::size_t           aK,
      const AppCheckFunction& aCheckFunction = [](const auto&, const auto&) {
        return true;
      });

 private:
  //! \return the gross rate for a given path length, in num of edges.
  double toGrossRate(const double aNetRate, const std::size_t aNumEdges) const;

  //! \return the net rate for a given path length, in num of edges.
  double toNetRate(const double aGrossRate, const std::size_t aNumEdges) const;

  //! Resource allocation of apps using random.
  void routeRandom(std::vector<AppDescriptor>& aApps,
                   support::RealRvInterface&   aRv);

  //! Resource allocation of apps using best-fit.
  void routeBestFit(std::vector<AppDescriptor>& aApps);

  //! Resource allocation of apps using DRR.
  void routeDrr(std::vector<AppDescriptor>& aApps, const double aQuantum);

  /**
   * @brief Schedule one app.
   *
   * @param aApp the application to be allocated resources
   * @param aResidualCapacity the maximum amount of gross capacity assigned to
   * this application, which is updated after the return of this call
   * @return true if the application is allocated resources
   * @return false otherwise
   */
  bool schedule(AppDescriptor& aApp, double& aResidualCapacity);

 private:
  double theMeasurementProbability;
};

} // namespace qr
} // namespace uiiit
