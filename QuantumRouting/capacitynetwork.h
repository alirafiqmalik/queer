/*
              __ __ __
             |__|__|  | __
             |  |  |  ||__|
  ___ ___ __ |  |  |  |
 |   |   |  ||  |  |  |    Ubiquitous Internet @ IIT-CNR
 |   |   |  ||  |  |  |    C++ quantum routing libraries and tools
 |_______|__||__|__|__|    https://github.com/ccicconetti/quantum-routing

Licensed under the MIT License <http://opensource.org/licenses/MIT>
Copyright (c) 2022 C. Cicconetti <https://ccicconetti.github.io/>

Permission is hereby  granted, free of charge, to any  person obtaining a copy
of this software and associated  documentation files (the "Software"), to deal
in the Software  without restriction, including without  limitation the rights
to  use, copy,  modify, merge,  publish, distribute,  sublicense, and/or  sell
copies  of  the Software,  and  to  permit persons  to  whom  the Software  is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE  IS PROVIDED "AS  IS", WITHOUT WARRANTY  OF ANY KIND,  EXPRESS OR
IMPLIED,  INCLUDING BUT  NOT  LIMITED TO  THE  WARRANTIES OF  MERCHANTABILITY,
FITNESS FOR  A PARTICULAR PURPOSE AND  NONINFRINGEMENT. IN NO EVENT  SHALL THE
AUTHORS  OR COPYRIGHT  HOLDERS  BE  LIABLE FOR  ANY  CLAIM,  DAMAGES OR  OTHER
LIABILITY, WHETHER IN AN ACTION OF  CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE  OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#pragma once

#include "QuantumRouting/network.h"
#include "Support/random.h"

#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/detail/adjacency_list.hpp>
#include <boost/graph/graph_traits.hpp>
#include <boost/graph/graph_utility.hpp>
#include <boost/graph/properties.hpp>
#include <boost/property_map/property_map.hpp>

#include <cinttypes>
#include <tuple>
#include <utility>
#include <vector>

namespace uiiit {
namespace qr {

/**
 * @brief A quantum network where edges are characterized by their capacity
 * only, in terms of EPR pairs that can be generated by per second.
 *
 * Links are directional and, in principle, the capacity can be different
 * for the two directions.
 */
class CapacityNetwork final : public Network
{
 public:
  // struct FlowDescriptor {
  //     unsigned long

  // };

  // vector of (src, dst)
  using EdgeVector = std::vector<std::pair<unsigned long, unsigned long>>;
  // vector of (src, dst, weight)
  using WeightVector =
      std::vector<std::tuple<unsigned long, unsigned long, double>>;

  using Graph =
      boost::adjacency_list<boost::listS,
                            boost::vecS,
                            boost::undirectedS,
                            boost::no_property,
                            boost::property<boost::edge_weight_t, double>,
                            boost::no_property,
                            boost::listS>;
  using VertexDescriptor = boost::graph_traits<Graph>::vertex_descriptor;

  /**
   * @brief Create a network with given links and assign random weights
   *
   * @param aEdges The edges of the network (src, dst).
   * @param aWeightRv The r.v. to draw the edge weights.
   * @param aMakeBidirectional If true then for each pair (A,B) two edges are
   * added A->B and B->A, with the same weight.
   */
  CapacityNetwork(const EdgeVector&         aEdges,
                  support::RealRvInterface& aWeightRv,
                  const bool                aMakeBidirectional);

  //! Save to a dot file.
  void toDot(const std::string& aFilename) const;

  //! \return the current weights, one per element in the return vector.
  WeightVector weights() const;

 private:
  Graph theGraph;
};

} // namespace qr
} // end namespace uiiit
